trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: ExecuteScript
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '7.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: AzurePowerShell@5
    displayName: 'Azure Login'
    inputs:
      azureSubscription: '<Your Azure Subscription Name>'
      ScriptType: 'InlineScript'
      Inline: 'pwsh -Command "Connect-AzAccount -ServicePrincipal -TenantId $env:tenantId -ApplicationId $env:servicePrincipalId -CertificateThumbprint $env:certificateThumbprint"'

  - task: Bash@3
    displayName: 'Execute Bash Script'
    inputs:
      targetType: 'inline'
      script: |
        # Set your Azure subscription details
        subscriptionId="your-subscription-id"

        # Set the context to the specified subscription
        az account set --subscription $subscriptionId

        # Get the current date
        currentDate=$(date +%Y-%m-%d)

        # Get the date 3 weeks from now
        expirationThreshold=$(date -d "+21 days" +%Y-%m-%d)

        # Get the list of all resource groups containing 'infra' in their name
        resourceGroups=($(az group list --query "[?contains(name, 'infra')].name" -o tsv))

        # Loop through the resource groups
        for resourceGroup in "${resourceGroups[@]}"; do
          echo "Processing resource group: $resourceGroup"

          # Get the list of Key Vaults in the current resource group
          keyVaults=($(az keyvault list --resource-group $resourceGroup --query "[].name" -o tsv))

          # Loop through the Key Vaults
          for keyVault in "${keyVaults[@]}"; do
            echo "Processing Key Vault: $keyVault"

            # Get the list of secrets in the current Key Vault
            secrets=($(az keyvault secret list --vault-name $keyVault --query "[].{Name:name, Expires:attributes.expires}" -o json))

            # Loop through the secrets and check if they are expired or will expire within 3 weeks
            for secret in "${secrets[@]}"; do
              secretName=$(echo $secret | jq -r '.Name')
              secretExpiration=$(echo $secret | jq -r '.Expires')

              if [ "$secretExpiration" == "null" ]; then
                continue
              fi

              if [[ "$secretExpiration" < "$currentDate" ]]; then
                echo "Secret $secretName is expired."
                # ... (Rest of your logic for expired secrets)
              elif [[ "$secretExpiration" < "$expirationThreshold" ]]; then
                echo "Secret $secretName is expiring soon."
                # ... (Rest of your logic for expiring secrets)
              fi
            done
          done
        done

        # ... (Rest of your script)

        # Capture the output in a variable
        output="$(${expiredSecretsArray.Count}) expired secrets found.
$(${expiringSecretsArray.Count}) expiring secrets found."

        # Write the output to the console
        echo "$output"

        # Export expired secrets to an Excel file
        exportExcel() {
          python3 -c "import pandas as pd; df = pd.DataFrame($expiredSecretsArray); df.to_excel('ExpiredSecrets_$currentDate.xlsx', index=False)"
        }
        exportExcel

        # Export expiring secrets to an Excel file
        exportExcelExpiring() {
          python3 -c "import pandas as pd; df = pd.DataFrame($expiringSecretsArray); df.to_excel('ExpiringSecrets_$currentDate.xlsx', index=False)"
        }
        exportExcelExpiring

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    inputs:
      targetPath: '$(Pipeline.Workspace)'
      artifact: 'ExcelReports'
